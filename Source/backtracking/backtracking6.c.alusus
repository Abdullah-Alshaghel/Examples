#include <stdio.h>
#define N 8

int board[N][N];

// Function to check if a queen can be placed at board[row][col]
int isSafe(int row, int col) {
    int i, j;

    // Check the left side of the current row
    for (i = 0; i < col; i++) {
        if (board[row][i])
            return 0;
    }

    // Check upper diagonal on the left
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j])
            return 0;
    }

    // Check lower diagonal on the left
    for (i = row, j = col; i < N && j >= 0; i++, j--) {
        if (board[i][j])
            return 0;
    }

    return 1;
}

// Recursive function to solve N-Queens problem
int solveNQueens(int col) {
    if (col >= N)
        return 1; // All queens are placed

    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1; // Place queen

            if (solveNQueens(col + 1)) // Recur to place the next queens
                return 1;

            board[i][col] = 0; // If placing queen here doesn't lead to a solution, backtrack
        }
    }

    return 0; // No solution found for this column
}

int main() {
    if (solveNQueens(0)) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%2d ", board[i][j]);
            }
            printf("\n");
        }
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}
