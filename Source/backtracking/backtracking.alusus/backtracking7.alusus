import "Srl/Console";
use Srl;

def N: 9;


def IntNN: alias array[array[Int, N], N];

func printGrid(grid: ref[IntNN]){
def row: Int;
def col: Int;
    for row = 0, row < N, row++{
        for col = 0, col < N, col++{
            Console.print("%2d", grid[row][col]);
        }
        Console.print("\n");
    }
    

}

func isSafe(grid: ref[IntNN], row: Int, col: Int, num: Int); Int{

def x: Int;

   for x = 0, x < N, x++{
       if grid[row][x] == num || grid[x][col] == num {
          return 0;
       }
   }
   
   def startRow: Int = row - row % 3;
   def startCol: Int = col - col % 3;
   def i: Int;
      for i = 0, l < 3, j++{
          if grid[i + startRow][j + startCol]  == num{
             return 0;
          }
      }
   
     return 1;
}


if isEmpty{
    return 1;
}
def num: Int;
    for num = 1, num <= N, num++{
        if isSafe(grid, row, col, num){
           grid[row][col] = num;
          
           if solveSudoku(grid){
              return 1;
           }
           
           grid[row][col] = 0;
        }
    } 
    
    return 0;
    
    
def grid: ref[IntNN] = {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
        
        if solveSudoku(grid){
           Console.print("Solution: \n");
           printGrid(grid);
           
        }else {
        
          Console.print("No solution exists. \n");
        }
        
        return 0;








