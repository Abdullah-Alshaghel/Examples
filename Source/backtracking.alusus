import "Srl/Console";
use Srl;

def N: 4;
def IntNN: alias array[array[Int, N], N];

func printSolution(board: ref[IntNN]) {
    def i: Int;
    def j: Int;
    for i = 0, i < N, i++ {
        for j = 0, j < N, j++ {
            Console.print("%d ", board(i)(j)); 
        }
        Console.print("\n");
    }
    Console.print("\n");
}

func isSafe(board: ref[IntNN], row: Int, col: Int): Bool {
    def i: Int;
    def j: Int;

    for i = 0, i < col, i++ {
        if board(row)(i) != 0
            return 0;
    }

    for (i = row, j = col), i >= 0 && j >= 0, (i--, j--) {
        if board(i)(j) != 0 {
            return 0;
        }
    }

    for (i = row, j = col), j >= 0 && i < N, (i++, j--) {
        if board(i)(j) != 0 {
            return 0;
        }
    }

    return 1;
}

func solveNQueensUtil(board: ref[IntNN], col: Int): Bool {
    if col == N {
        printSolution(board);
        return 1;
    }

    def res: Bool = 0;
    def i: Int;
    for i = 0, i < N, i++ {
        if isSafe(board, i, col) {
            board(i)(col) = 1;
            res = solveNQueensUtil(board, col + 1) || res;
            board(i)(col) = 0; // backtrack
        }
    }

    return res;
}

func solveNQueens() {
    def board: IntNN;
    def i: Int;
    def j: Int;
    for i = 0, i < N, i++ {
        for j = 0, j < N, j++ {
            board(i)(j) = 0;
        }
    }
    if not solveNQueensUtil(board, 0) {
        Console.print("No solution exists.\n");
    }
}

solveNQueens();
